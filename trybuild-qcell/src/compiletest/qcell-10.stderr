error[E0277]: `Cell<i32>` cannot be shared between threads safely
   --> src/compiletest/qcell-10.rs:11:24
    |
11  |     std::thread::spawn(|| owner.ro(&cell).set(200));  // Compile fail
    |     ------------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely
    |     |
    |     required by a bound introduced by this call
    |
    = help: the trait `Sync` is not implemented for `Cell<i32>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead
    = note: required for `QCell<Cell<i32>>` to implement `Sync`
    = note: required for `&QCell<Cell<i32>>` to implement `Send`
note: required because it's used within this closure
   --> src/compiletest/qcell-10.rs:11:24
    |
11  |     std::thread::spawn(|| owner.ro(&cell).set(200));  // Compile fail
    |                        ^^
note: required by a bound in `spawn`
   --> $RUST/std/src/thread/mod.rs
    |
    | pub fn spawn<F, T>(f: F) -> JoinHandle<T>
    |        ----- required by a bound in this function
...
    |     F: Send + 'static,
    |        ^^^^ required by this bound in `spawn`
